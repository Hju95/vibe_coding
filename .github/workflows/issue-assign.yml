name: Issue Auto Assign

on:
  issues:
    types: [opened]

jobs:
  assign:
    runs-on: ubuntu-latest
    
    steps:
    - name: Auto Assign Issue
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo, number } = context.issue;
          const issue = await github.rest.issues.get({
            owner,
            repo,
            issue_number: number,
          });
          
          const title = issue.data.title.toLowerCase();
          const body = (issue.data.body || '').toLowerCase();
          const author = issue.data.user.login;
          
          // 팀원 목록 및 전문 분야 (프로젝트에 맞게 수정 필요)
          const teamMembers = {
            'Hju95': ['backend', 'api', 'database'], // 실제 GitHub 사용자명으로 변경
            // 'frontend-dev': ['frontend', 'ui', 'streamlit'],
            // 'devops-engineer': ['deployment', 'ci', 'docker']
          };
          
          let assignee = null;
          
          // 키워드 기반 자동 할당
          for (const [member, keywords] of Object.entries(teamMembers)) {
            for (const keyword of keywords) {
              if (title.includes(keyword) || body.includes(keyword)) {
                assignee = member;
                break;
              }
            }
            if (assignee) break;
          }
          
          // 특정 키워드가 없으면 라운드로빈 방식으로 할당
          if (!assignee) {
            const members = Object.keys(teamMembers);
            const issueNumber = number;
            assignee = members[issueNumber % members.length];
          }
          
          // 작성자 본인이면 다른 사람으로 할당
          if (assignee === author && Object.keys(teamMembers).length > 1) {
            const otherMembers = Object.keys(teamMembers).filter(m => m !== author);
            assignee = otherMembers[0];
          }
          
          if (assignee && assignee !== author) {
            try {
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: number,
                assignees: [assignee]
              });
              
              console.log(`이슈 #${number}이 ${assignee}에게 할당되었습니다.`);
              
              // 할당 알림 코멘트
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: `🎯 이 이슈가 @${assignee}님에게 자동 할당되었습니다.\n\n할당된 이유: ${title.includes('backend') || body.includes('backend') ? 'Backend 관련 이슈' : title.includes('frontend') || body.includes('frontend') ? 'Frontend 관련 이슈' : '순차 할당'}\n\n---\n*자동 할당 시스템 🤖*`
              });
              
            } catch (error) {
              console.log('이슈 할당 중 오류 발생:', error.message);
            }
          } else {
            console.log('할당할 적절한 담당자를 찾지 못했습니다.');
          } 